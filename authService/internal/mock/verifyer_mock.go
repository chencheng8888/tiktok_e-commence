// Code generated by MockGen. DO NOT EDIT.
// Source: ./verifyer.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockTokenVerifyer is a mock of TokenVerifyer interface.
type MockTokenVerifyer struct {
	ctrl     *gomock.Controller
	recorder *MockTokenVerifyerMockRecorder
}

// MockTokenVerifyerMockRecorder is the mock recorder for MockTokenVerifyer.
type MockTokenVerifyerMockRecorder struct {
	mock *MockTokenVerifyer
}

// NewMockTokenVerifyer creates a new mock instance.
func NewMockTokenVerifyer(ctrl *gomock.Controller) *MockTokenVerifyer {
	mock := &MockTokenVerifyer{ctrl: ctrl}
	mock.recorder = &MockTokenVerifyerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenVerifyer) EXPECT() *MockTokenVerifyerMockRecorder {
	return m.recorder
}

// VerifyJwtToken mocks base method.
func (m *MockTokenVerifyer) VerifyJwtToken(tokenString, jwtSecret string) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyJwtToken", tokenString, jwtSecret)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyJwtToken indicates an expected call of VerifyJwtToken.
func (mr *MockTokenVerifyerMockRecorder) VerifyJwtToken(tokenString, jwtSecret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyJwtToken", reflect.TypeOf((*MockTokenVerifyer)(nil).VerifyJwtToken), tokenString, jwtSecret)
}

// MockCacheProxy is a mock of CacheProxy interface.
type MockCacheProxy struct {
	ctrl     *gomock.Controller
	recorder *MockCacheProxyMockRecorder
}

// MockCacheProxyMockRecorder is the mock recorder for MockCacheProxy.
type MockCacheProxyMockRecorder struct {
	mock *MockCacheProxy
}

// NewMockCacheProxy creates a new mock instance.
func NewMockCacheProxy(ctrl *gomock.Controller) *MockCacheProxy {
	mock := &MockCacheProxy{ctrl: ctrl}
	mock.recorder = &MockCacheProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheProxy) EXPECT() *MockCacheProxyMockRecorder {
	return m.recorder
}

// ExistKey mocks base method.
func (m *MockCacheProxy) ExistKey(ctx context.Context, key string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistKey", ctx, key)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ExistKey indicates an expected call of ExistKey.
func (mr *MockCacheProxyMockRecorder) ExistKey(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistKey", reflect.TypeOf((*MockCacheProxy)(nil).ExistKey), ctx, key)
}

// GetTTL mocks base method.
func (m *MockCacheProxy) GetTTL(ctx context.Context, key string) (time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTTL", ctx, key)
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTTL indicates an expected call of GetTTL.
func (mr *MockCacheProxyMockRecorder) GetTTL(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTTL", reflect.TypeOf((*MockCacheProxy)(nil).GetTTL), ctx, key)
}

// GetValue mocks base method.
func (m *MockCacheProxy) GetValue(ctx context.Context, key string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValue", ctx, key)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValue indicates an expected call of GetValue.
func (mr *MockCacheProxyMockRecorder) GetValue(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValue", reflect.TypeOf((*MockCacheProxy)(nil).GetValue), ctx, key)
}

// SetKV mocks base method.
func (m *MockCacheProxy) SetKV(ctx context.Context, key string, value interface{}, expire time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetKV", ctx, key, value, expire)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetKV indicates an expected call of SetKV.
func (mr *MockCacheProxyMockRecorder) SetKV(ctx, key, value, expire interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKV", reflect.TypeOf((*MockCacheProxy)(nil).SetKV), ctx, key, value, expire)
}
